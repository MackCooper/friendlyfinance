{
  "name": "get-sheet-done",
  "version": "0.1.4",
  "description": "Pull data from google spreadsheets",
  "main": "dist/GetSheetDone.js",
  "scripts": {
    "start": "webpack-dev-server --port 3000",
    "build": "webpack && webpack --env build",
    "test": "jest",
    "gh-pages": "mkdir -p example/dist && cp -r example/src/ example/dist && cp dist/GetSheetDone.js example/dist/ && gh-pages -d example/dist"
  },
  "dependencies": {
    "fetch-jsonp": "1.1.1"
  },
  "devDependencies": {
    "babel-core": "^6.23.1",
    "babel-eslint": "^7.2.3",
    "babel-loader": "^6.2.10",
    "babel-preset-es2015": "^6.22.0",
    "eslint": "^4.3.0",
    "eslint-loader": "^1.9.0",
    "gh-pages": "^1.0.0",
    "html-webpack-plugin": "2.22.0",
    "jest": "^20.0.4",
    "webpack": "^3.4.1",
    "webpack-dev-server": "^2.6.1"
  },
  "author": {
    "name": "Gilad Dayagi"
  },
  "license": "ISC",
  "repository": {
    "type": "git",
    "url": "https://github.com/giladaya/get-sheet-done.git"
  },
  "readme": "# GetSheetDone\r\nHelper library to pull data from google spreadsheets.   \r\nLive demo: https://giladaya.github.io/get-sheet-done/\r\n\r\n## Caveats\r\nThis is a simple library intended to provide a quick-and-dirty way to only **read** data from a Google spreadsheet.  \r\nThe document you read from must be publicly published for this to work and the entire sheet data is fetched.  \r\nIf you need something more sophisticated, take a look at  the [Google Sheets API](https://developers.google.com/sheets/api/)\r\n\r\n## Usage \r\n### Preparation\r\n- In the spreadsheet, `file -> publish to web`  \r\n- Note the document key in the URL  \r\n\r\n### In browser\r\nSee `/example/src` for a simple browser-based demo.  \r\nMake sure to include the the dependecy `fetch-jsonp` in the page.\r\n\r\n### With a package loader\r\nInstall from npm:  \r\n```\r\nnpm install --save get-sheet-done\r\n```\r\n\r\nUse in code:  \r\n```javascript\r\nimport GetSheetDone from 'get-sheet-done';\r\n\r\nGetSheetDone.raw(DOC_KEY).then(sheet => {\r\n    console.log(sheet)\r\n})\r\n```\r\n\r\n\r\n## Api\r\nThere are three functions that return a promise and fetch the data from a published spreadsheet.  \r\nEach function gets as arguments the document key (from the document url) and optinally the sheet index (first sheet has index 1).  \r\nThe functions differ in the way they parse and return the data:\r\n\r\n### Raw\r\n```javascript\r\nGetSheetDone.raw(id, sheetNum = 1)\r\n```\r\nGet the data as a raw array of arrays (rows).\r\nSuitable for spreadsheets that only contain values.\r\n\r\n#### Example\r\nThis sheet:  \r\n\r\n|     |     |     |     |     |\r\n|-----|-----|-----|-----|-----|\r\n|     | *A* | *B* | *C* | *D* |\r\n| *1* | 22  | 24  | 26  | 20  |\r\n| *2* | 31  | 32  | 37  | 36  |\r\n| *3* | 11  | 14  | 19  | 12  |\r\n\r\nWill result in this data:\r\n```javascript\r\n{\r\n  title: \"Sheet1\",\r\n  updated: \"2017-07-30T07:11:40.056Z\",\r\n  data: [\r\n    [\"22\", \"24\", \"26\", \"20\"],\r\n    [\"31\", \"32\", \"37\", \"36\"],\r\n    [\"11\", \"14\", \"19\", \"12\"],\r\n  ]\r\n}\r\n```\r\n\r\n### Labeled Columns\r\n```javascript\r\nGetSheetDone.labeledCols(id, sheetNum = 1)\r\n```\r\nGet the data as an array of objects, each representing a row. The keys are taken from the first row in the spreadsheet which is assumed to contain column headers.  \r\n\r\nNote that all labels are converted to lower case and the only non-alphanumeric characters that are kept are periods and hyphens, so if the original label was `Lorem-ipsum dolor.sit:amet_blah`, the result labels would be: `lorem-ipsumdolor.sitametblah`.\r\n\r\n#### Example\r\nThis sheet:  \r\n\r\n|     |     |     |     |     |\r\n|-----|-----|-----|-----|-----|\r\n|     | *A* | *B* | *C* | *D* |\r\n| *1* | **Q1** | **Q2** | **Q3** | **Q4** |\r\n| *2* | 22  | 24  | 26  | 20  |\r\n| *3* | 31  | 32  | 37  | 36  |\r\n| *4* | 11  | 14  | 19  | 12  |\r\n \r\nWill result in this data: \r\n```javascript\r\n{\r\n  title: \"Sheet1\",\r\n  updated: \"2017-07-30T07:11:40.056Z\",\r\n  data: [{\r\n    q1: \"22\",\r\n    q2: \"24\",\r\n    q3: \"26\",\r\n    q4: \"20\"\r\n  },{\r\n    q1: \"31\",\r\n    q2: \"32\",\r\n    q3: \"37\",\r\n    q4: \"36\"\r\n  },{\r\n    q1: \"11\",\r\n    q2: \"14\",\r\n    q3: \"19\",\r\n    q4: \"12\"\r\n  }]\r\n}\r\n``` \r\n\r\n### Labeled Columns and rows\r\n```javascript\r\nGetSheetDone.labeledColsRows(id, sheetNum = 1)\r\n```\r\nGet the data as an object of objects, each representing a row. The first column in the spreadsheet is assumed to contain row headers, and the first row in the spreadsheet is assumed to contain column headers.  \r\n\r\nNote that all column labels are converted to lower case and the only non-alphanumeric characters that are kept are periods and hyphens, so if the original label was `Lorem-ipsum dolor.sit:amet_blah`, the result labels would be: `lorem-ipsumdolor.sitametblah`.  \r\nRow labels remain unchanged.\r\n\r\n#### Example\r\nThis sheet:  \r\n\r\n|     |        |        |        |        |        |\r\n|-----|--------|--------|--------|--------|--------|\r\n|     | *A*    | *B*    | *C*    | *D*    | *E*    |\r\n| *1* |        | **Q1** | **Q2** | **Q3** | **Q4** |\r\n| *2* | **UK** | 22     | 24     | 26     | 20     |\r\n| *3* | **US** | 31     | 32     | 37     | 36     |\r\n| *4* | **AU** | 11     | 14     | 19     | 12     |\r\n\r\nWill result in this data: \r\n```javascript\r\n{\r\n  title: \"Sheet1\",\r\n  updated: \"2017-07-30T07:11:40.056Z\",\r\n  data: {\r\n    UK: {\r\n      q1: \"22\",\r\n      q2: \"24\",\r\n      q3: \"26\",\r\n      q4: \"20\"\r\n    },\r\n    US: {\r\n      q1: \"31\",\r\n      q2: \"32\",\r\n      q3: \"37\",\r\n      q4: \"36\"\r\n    },\r\n    AU: {\r\n      q1: \"11\",\r\n      q2: \"14\",\r\n      q3: \"19\",\r\n      q4: \"12\"\r\n    }\r\n  }\r\n}\r\n``` \r\n\r\n## Development\r\n1. Clone this repo\r\n2. `npm install`\r\n3. `npm start`\r\n4. Go to `localhost:3000`\r\n5. See `package.json` for other available scripts\r\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/giladaya/get-sheet-done/issues"
  },
  "_id": "get-sheet-done@0.1.4",
  "dist": {
    "shasum": "18f11eb2080ac3b84dd87307e17f431fa5d17811"
  },
  "_from": "get-sheet-done@",
  "_resolved": "https://registry.npmjs.org/get-sheet-done/-/get-sheet-done-0.1.4.tgz"
}
